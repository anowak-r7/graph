###############################################################################
# Configuration values used in this plugin along with their defaults.
###############################################################################

# The table name prefix allows you to define multiple graphs against the same
# datastore without conflicting with each other.
#storage.dynamodb.prefix=titan

# This feature sets the force consistent read property on DynamoDB calls.
# Warning that this will slow performance.
storage.dynamodb.force-consistent-read=true

# Self-throttled retry with exponential backoff settings
# Number of times to self throttle
storage.dynamodb.max-self-throttled-retries=60
# initial self throttled retry wait milliseconds
#storage.dynamodb.initial-retry-millis=25
storage.dynamodb.control-plane-rate=10
#storage.dynamodb.enable-parallel-scans=false

# Define the initial read capacity for a given DynamoDB table.
storage.dynamodb.stores.edgestore.capacity-read=750
storage.dynamodb.stores.graphindex.capacity-read=750
storage.dynamodb.stores.titan_ids.capacity-read=10
storage.dynamodb.stores.system_properties.capacity-read=10
storage.dynamodb.stores.systemlog.capacity-read=10
storage.dynamodb.stores.txlog.capacity-read=10

# Define the initial write capacity for a given DynamoDB table.
storage.dynamodb.stores.edgestore.capacity-write=750
storage.dynamodb.stores.graphindex.capacity-write=750
storage.dynamodb.stores.titan_ids.capacity-write=10
storage.dynamodb.stores.system_properties.capacity-write=10
storage.dynamodb.stores.systemlog.capacity-write=10
storage.dynamodb.stores.txlog.capacity-write=10

# Rate limit reads for the given table in reads per second.
storage.dynamodb.stores.edgestore.read-rate=750
storage.dynamodb.stores.graphindex.read-rate=750
storage.dynamodb.stores.titan_ids.read-rate=10
storage.dynamodb.stores.system_properties.read-rate=10
storage.dynamodb.stores.systemlog.read-rate=10
storage.dynamodb.stores.txlog.read-rate=10

# Rate limit reads for the given table in writes per second.
storage.dynamodb.stores.edgestore.write-rate=750
storage.dynamodb.stores.graphindex.write-rate=750
storage.dynamodb.stores.titan_ids.write-rate=10
storage.dynamodb.stores.system_properties.write-rate=10
storage.dynamodb.stores.systemlog.write-rate=10
storage.dynamodb.stores.txlog.write-rate=10

# Scan limit limits the results for given store. They apply to all tables that underlie the store,
# regardless of a store's choice of data-model (SINGLE, MULTI).
#storage.dynamodb.stores.edgestore.scan-limit=10000
#storage.dynamodb.stores.graphindex.scan-limit=10000
#storage.dynamodb.stores.titan_ids.scan-limit=10000
#storage.dynamodb.stores.system_properties.scan-limit=10000
#storage.dynamodb.stores.systemlog.scan-limit=10000
#storage.dynamodb.stores.txlog.scan-limit=10000

# Optionally, configure the settings for user transaction log stores. They
# all start with the prefix ulog_
#storage.dynamodb.stores.ulog_test.data-model=SINGLE
#storage.dynamodb.stores.ulog_test.capacity-read=750
#storage.dynamodb.stores.ulog_test.capacity-write=750
#storage.dynamodb.stores.ulog_test.read-rate=750
#storage.dynamodb.stores.ulog_test.write-rate=750
#storage.dynamodb.stores.ulog_test.scan-limit=10000

# There are two implementations for a given store.  For a full list
# of table names look at com.thinkaurelius.titan.diskstorage.Backend.
# SINGLE -      Means that all the values for a given key are put into a single
#               DynamoDB item.  A SINGLE is efficient because all the
#               updates for a single key can be done atomically. However, the
#               tradeoff is that DynamoDB has a 400k limit per item so it cannot
#               hold much data.
#
# MULTI  -      Means that each 'column' is used as a range key in DynamoDB so
#               a key can span multiple items. A MULTI implementation is
#               slightly less efficient than SINGLE because it must use
#               DynamoDB Query rather than a direct lookup. This is the default.
# It is HIGHLY recommended to use multi_item for edgestore unless your graph
# has very low max degree.
storage.dynamodb.stores.edgestore.data-model=MULTI
storage.dynamodb.stores.graphindex.data-model=MULTI
storage.dynamodb.stores.titan_ids.data-model=MULTI
storage.dynamodb.stores.system_properties.data-model=MULTI
storage.dynamodb.stores.systemlog.data-model=MULTI
storage.dynamodb.stores.txlog.data-model=MULTI

# The following configurations are for the DynamoDB ClientConfiguration.
#storage.dynamodb.client.connection-timeout=60000
#storage.dynamodb.client.connection-ttl=-1
storage.dynamodb.client.connection-max=250
# Turn off SDK retries
storage.dynamodb.client.retry-error-max=0
#storage.dynamodb.client.use-gzip=false
#storage.dynamodb.client.use-reaper=true
#storage.dynamodb.client.user-agent=

#storage.dynamodb.client.proxy.domain=
#storage.dynamodb.client.proxy.workstation=
#storage.dynamodb.client.proxy.host=
#storage.dynamodb.client.proxy.port=
#storage.dynamodb.client.proxy.username=
#storage.dynamodb.client.proxy.password=
#storage.dynamodb.client.socket.buffer-send-hint=1048576
#storage.dynamodb.client.socket.buffer-recv-hint=1048576
#storage.dynamodb.client.socket.timeout=50000
#storage.dynamodb.client.socket.tcp-keep-alive=false

# This plugin requires a thread pool to make parallel requests to DynamoDB.
# The following are the configuration for the executor service. The default core pool is
# Runtime.getRuntime().availableProcessors() * 2 and the default max pool size is
# Runtime.getRuntime().availableProcessors() * 4.
storage.dynamodb.client.executor.core-pool-size=25
# Do not need more threads in thread pool than the number of http connections
storage.dynamodb.client.executor.max-pool-size=250
storage.dynamodb.client.executor.keep-alive=60000
storage.dynamodb.client.executor.max-concurrent-operations=1
#should be at least as large as storage.buffer-size
storage.dynamodb.client.executor.max-queue-length=1024

# This is the Titan configuration to use to define the DynamoDBStoreManager.
storage.backend=com.rapid7.diskstorage.dynamodb.DynamoDBStoreManager

# Credentials. You can set credentials to any value when running against DynamoDBLocal
# Needs to be the fully qualified class name of a class implementing
# com.amazonaws.auth.AWSCredentials or com.amazonaws.auth.AWSCredentialsProvider.
#storage.dynamodb.client.credentials.class-name=com.amazonaws.auth.DefaultAWSCredentialsProviderChain
storage.dynamodb.client.credentials.class-name=com.amazonaws.auth.BasicAWSCredentials
# Comma separated list of strings to pass to the constructor of the class specified above.
storage.dynamodb.client.credentials.constructor-args=

# The endpoint to use for DynamoDB.
#storage.dynamodb.client.endpoint=http://localhost:4567
storage.dynamodb.client.endpoint=https://dynamodb.us-east-1.amazonaws.com

#storage buffer size defaults to 1024. this is the number of Update/Delete Item
#calls in a mutateMany call when graphindex and edgestore are both MULTI model.
storage.buffer-size=1024
# When Titan is started, it will attempt to communicate with the storage backend. If the
# backend cluster is in the process of starting up or otherwise not yet fully available,
# Titan will repeatedly re-attempt communication and wait for this long before failing.
storage.setup-wait=120000
# Size of the block to be acquired. Larger block sizes require fewer block applications but also
# leave a larger fraction of the id pool occupied and potentially lost. For write heavy applications,
# larger block sizes should be chosen.
ids.block-size=100000
# Turn off titan retries as we batch and have our own exponential backoff strategy.
storage.write-time=1 ms
storage.read-time=1 ms
# Titan metrics - http://s3.thinkaurelius.com/docs/titan/0.5.4/monitoring.html#_metrics_in_titan
# Metrics configuration - http://s3.thinkaurelius.com/docs/titan/0.5.4/titan-config-ref.html#_metrics
#metrics.enabled=true
#metrics.prefix=t
# Required; specify logging interval in milliseconds
#metrics.csv.interval=500
#metrics.csv.directory=metrics
# The metrics prefix allows you to change what gets prepended to the codahale metric names.
#storage.dynamodb.metrics-prefix=t

# Configures the number of bits of Titan assigned ids that are reserved for a unique id marker that
# allows the id allocation to be scaled over multiple sub-clusters and to reduce race-conditions
# when a lot of Titan instances attempt to allocate ids at the same time (e.g. during parallel bulk
# loading)
# IMPORTANT: This should never ever, ever be modified from its initial value and ALL Titan instances
# must use the same value. Otherwise, data corruption will occur.
#storage.idauthority-uniqueid-bits=0

# Uncomment these to load a graph using the GraphOfTheGodsFactory
#index.search.backend=elasticsearch
#index.search.directory=/tmp/searchindex
#index.search.elasticsearch.client-only=false
#index.search.elasticsearch.local-mode=true
#index.search.elasticsearch.interface=NODE
